//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Industrial
{
    [Serializable]
    public class RobotStatusMsg : Message
    {
        public const string k_RosMessageName = "industrial_msgs/RobotStatus";
        public override string RosMessageName => k_RosMessageName;

        //  The RobotStatus message contains low level status information 
        //  that is specific to an industrial robot controller
        //  The header frame ID is not used
        public HeaderMsg header;
        //  The robot mode captures the operating mode of the robot.  When in
        //  manual, remote motion is not possible.
        public RobotModeMsg mode;
        //  Estop status: True if robot is e-stopped.  The drives are disabled
        //  and motion is not possible.  The e-stop condition must be acknowledged
        //  and cleared before any motion can begin.
        public TriStateMsg e_stopped;
        //  Drive power status: True if drives are powered.  Motion commands will 
        //  automatically enable the drives if required.  Drive power is not requred
        //  for possible motion
        public TriStateMsg drives_powered;
        //  Motion enabled: True if robot motion is possible.
        public TriStateMsg motion_possible;
        //  Motion status: True if robot is in motion, otherwise false
        public TriStateMsg in_motion;
        //  Error status: True if there is an error condition on the robot. Motion may
        //  or may not be affected (see motion_possible)
        public TriStateMsg in_error;
        //  Error code: Vendor specific error code (non zero indicates error)
        public int error_code;

        public RobotStatusMsg()
        {
            this.header = new HeaderMsg();
            this.mode = new RobotModeMsg();
            this.e_stopped = new TriStateMsg();
            this.drives_powered = new TriStateMsg();
            this.motion_possible = new TriStateMsg();
            this.in_motion = new TriStateMsg();
            this.in_error = new TriStateMsg();
            this.error_code = 0;
        }

        public RobotStatusMsg(HeaderMsg header, RobotModeMsg mode, TriStateMsg e_stopped, TriStateMsg drives_powered, TriStateMsg motion_possible, TriStateMsg in_motion, TriStateMsg in_error, int error_code)
        {
            this.header = header;
            this.mode = mode;
            this.e_stopped = e_stopped;
            this.drives_powered = drives_powered;
            this.motion_possible = motion_possible;
            this.in_motion = in_motion;
            this.in_error = in_error;
            this.error_code = error_code;
        }

        public static RobotStatusMsg Deserialize(MessageDeserializer deserializer) => new RobotStatusMsg(deserializer);

        private RobotStatusMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            this.mode = RobotModeMsg.Deserialize(deserializer);
            this.e_stopped = TriStateMsg.Deserialize(deserializer);
            this.drives_powered = TriStateMsg.Deserialize(deserializer);
            this.motion_possible = TriStateMsg.Deserialize(deserializer);
            this.in_motion = TriStateMsg.Deserialize(deserializer);
            this.in_error = TriStateMsg.Deserialize(deserializer);
            deserializer.Read(out this.error_code);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mode);
            serializer.Write(this.e_stopped);
            serializer.Write(this.drives_powered);
            serializer.Write(this.motion_possible);
            serializer.Write(this.in_motion);
            serializer.Write(this.in_error);
            serializer.Write(this.error_code);
        }

        public override string ToString()
        {
            return "RobotStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\nmode: " + mode.ToString() +
            "\ne_stopped: " + e_stopped.ToString() +
            "\ndrives_powered: " + drives_powered.ToString() +
            "\nmotion_possible: " + motion_possible.ToString() +
            "\nin_motion: " + in_motion.ToString() +
            "\nin_error: " + in_error.ToString() +
            "\nerror_code: " + error_code.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
